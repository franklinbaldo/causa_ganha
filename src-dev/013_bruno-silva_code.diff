--- a/src/tribunais/tjro/discovery.py
+++ b/src/tribunais/tjro/discovery.py
@@ -6,6 +6,10 @@
 from datetime import date
 from typing import Optional, List
 from models.interfaces import DiarioDiscovery
+# Import the specific function from the original downloader module
+from .downloader import get_tjro_pdf_url as original_get_tjro_pdf_url
+
+logger = logging.getLogger(__name__) # Added logger


 class TJRODiscovery(DiarioDiscovery):
@@ -24,33 +28,14 @@
     def get_diario_url(self, target_date: date) -> Optional[str]:
         """
         Get diario URL for specific date.
-
-        This implementation reuses the existing logic from downloader.py
-        get_tjro_pdf_url function.
+        This implementation calls the existing logic from downloader.py.
         """
-        date_str = target_date.strftime("%Y%m%d")
-
         try:
-            response = requests.get(
-                self.TJRO_BASE_URL, headers=self.headers, timeout=30
-            )
-            response.raise_for_status()
-
-            # Use the same regex pattern as the existing downloader
-            pdf_match = re.search(
-                rf"https://www\.tjro\.jus\.br/novodiario/\d{{4}}/[^\"']*{date_str}[^\"']*\.pdf",
-                response.text,
-            )
-
-            if pdf_match:
-                url = pdf_match.group(0)
-                logging.info(f"Found TJRO diario URL for {target_date}: {url}")
-                return url
-            else:
-                logging.warning(f"No TJRO diario found for date {target_date}")
-                return None
-
-        except requests.RequestException as e:
-            logging.error(f"Error finding TJRO diario URL for {target_date}: {e}")
+            # Call the well-tested function from the original downloader
+            url = original_get_tjro_pdf_url(target_date)
+            logger.info(f"TJRODiscovery: Found diario URL for {target_date} via downloader.get_tjro_pdf_url: {url}")
+            return url
+        except Exception as e: # Catch any exception from the wrapped call
+            logger.error(f"TJRODiscovery: Error calling downloader.get_tjro_pdf_url for {target_date}: {e}")
             return None

     def get_latest_diario_url(self) -> Optional[str]:
@@ -58,27 +43,28 @@
         Get URL for the most recent available diario.

         This implementation is based on the existing fetch_latest_tjro_pdf logic
-        which follows a redirect from TJRO_LATEST_URL.
+        which expects a redirect from TJRO_LATEST_URL to the PDF.
         """
         try:
             response = requests.get(
-                self.TJRO_LATEST_URL, headers=self.headers, timeout=30
+                self.TJRO_LATEST_URL, headers=self.headers, timeout=30, allow_redirects=False # Get redirect header
             )
             response.raise_for_status()

-            # Look for PDF links in the latest page
-            pdf_match = re.search(
-                r"https://www\.tjro\.jus\.br/novodiario/\d{4}/[^\"']*\.pdf",
-                response.text,
-            )
-
-            if pdf_match:
-                url = pdf_match.group(0)
-                logging.info(f"Found latest TJRO diario URL: {url}")
-                return url
+            if response.status_code == 302 and "Location" in response.headers:
+                pdf_url = response.headers["Location"]
+                if not pdf_url.startswith("http"): # Handle relative redirect URLs
+                    # Attempt to construct absolute URL, might need base from response.url or predefined
+                    base_url_for_redirect = "/".join(self.TJRO_LATEST_URL.split("/")[:3])
+                    pdf_url = f"{base_url_for_redirect}{pdf_url}" if pdf_url.startswith('/') else f"{self.TJRO_LATEST_URL.rsplit('/', 1)[0]}/{pdf_url}"
+
+                logger.info(f"TJRODiscovery: Found latest diario URL via redirect: {pdf_url}")
+                return pdf_url
             else:
-                logging.warning("No latest TJRO diario found")
+                logger.warning(f"TJRODiscovery: Expected redirect from {self.TJRO_LATEST_URL} but got status {response.status_code}. Page content: {response.text[:200]}")
                 return None

         except requests.RequestException as e:
-            logging.error(f"Error finding latest TJRO diario URL: {e}")
+            logger.error(f"TJRODiscovery: Error finding latest diario URL: {e}")
             return None

     def list_diarios_in_range(self, start_date: date, end_date: date) -> List[str]:
